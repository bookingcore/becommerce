<?php

namespace Modules\Product\Models;

use App\User;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Support\Arr;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Cache;
use Illuminate\Support\Facades\Validator;
use Illuminate\Http\Request;
use Modules\Core\Models\Attributes;
use Modules\Core\Models\Terms;
use Modules\Media\Helpers\FileHelper;
use Modules\News\Models\Tag;
use Modules\Order\Helpers\CartManager;
use Modules\Product\Database\Factories\ProductFactory;
use Modules\Review\Models\Review;
use Gloudemans\Shoppingcart\Facades\Cart;
use Modules\User\Models\UserWishList;

class Product extends BaseProduct
{
    use HasFactory;
    protected $table = 'products';
    public $type = 'product';

    protected $fillable = [
        'title',
        'slug',
        'content',
        'image_id',
        'banner_image_id',
        'short_desc',
        'category_id',
        'brand_id',
        'is_featured',
        'shipping_class',
        'gallery',
        'video',
        'price',
        'sale_price',
        'status'
    ];
    protected $slugField     = 'slug';
    protected $slugFromField = 'title';
    protected $seo_type = 'product';
    protected $casts = [
        'attributes_for_variation'=>'array'
    ];

    protected $cleanFields = [
        'content','short_desc'
    ];

    /**
     * @var Review
     */
    protected $reviewClass;

    protected $translation_class = ProductTranslation::class;

    public function __construct(array $attributes = [])
    {
        parent::__construct($attributes);
        $this->reviewClass = Review::class;
    }

    protected static function newFactory()
    {
        return ProductFactory::new();
    }

    public static function getModelName()
    {
        return __("Product");
    }

    public static function getTableName()
    {
        return with(new static)->table;
    }

    public static function getTypeName(){
        return __('Simple Product');
    }

    /**
     * Get SEO fop page list
     *
     * @return mixed
     */
    static public function getSeoMetaForPageList()
    {
        $meta['seo_title'] = __("Search for Products");
        if (!empty($title = setting_item_with_lang("product_page_list_seo_title",false))) {
            $meta['seo_title'] = $title;
        }else if(!empty($title = setting_item_with_lang("product_page_search_title"))) {
            $meta['seo_title'] = $title;
        }
        $meta['seo_image'] = null;
        if (!empty($title = setting_item("product_page_list_seo_image"))) {
            $meta['seo_image'] = $title;
        }else if(!empty($title = setting_item("product_page_search_banner"))) {
            $meta['seo_image'] = $title;
        }
        $meta['seo_desc'] = setting_item_with_lang("product_page_list_seo_desc");
        $meta['seo_share'] = setting_item_with_lang("product_page_list_seo_share");
        $meta['full_url'] = route('product.index');
        return $meta;
    }


    public function terms(){
        return $this->hasMany(ProductTerm::class, "target_id");
    }

    public function getDetailUrl($locale = false)
    {
        return route('product.detail',['slug'=>$this->slug ?  $this->slug : $this->id]);
    }

    public static function getLinkForPageSearch( $locale = false , $param = [] ){

        return url(app_get_locale(false , false , '/'). 'product'."?".http_build_query($param));
    }

    public function getGallery($featuredIncluded = false)
    {
        if (empty($this->gallery))
            return $this->gallery;
        $list_item = [];
        if ($featuredIncluded and $this->image_id) {
            $list_item[] = [
                'large' => FileHelper::url($this->image_id, 'full'),
                'thumb' => FileHelper::url($this->image_id, 'thumb')
            ];
        }
        $items = explode(",", $this->gallery);
        foreach ($items as $k => $item) {
            $large = FileHelper::url($item, 'full');
            $thumb = FileHelper::url($item, 'thumb');
            $list_item[] = [
                'large' => $large,
                'thumb' => $thumb
            ];
        }
        return $list_item;
    }

    public function getEditUrl()
    {
        return url(route('space.admin.edit',['id'=>$this->id]));
    }

    public function getDiscountPercentAttribute()
    {
        if (    !empty($this->price) and $this->price > 0
            and !empty($this->origin_price) and $this->origin_price > 0
            and $this->price < $this->origin_price
        ) {
            $percent = 100 - ceil($this->price / ($this->origin_price / 100));
            return $percent . "%";
        }
    }

    public function fill(array $attributes)
    {
        if(!empty($attributes)){
            foreach ( $this->fillable as $item ){
                $attributes[$item] = $attributes[$item] ?? null;
            }
        }
        return parent::fill($attributes); // TODO: Change the autogenerated stub
    }

    public static function searchForMenu($q = false)
    {
        $query = static::select('id', 'title as name');
        if (strlen($q)) {

            $query->where('title', 'like', "%" . $q . "%");
        }
        $a = $query->limit(10)->get();
        return $a;
    }

    public static function getMinMaxPrice()
    {
        $model = parent::selectRaw('MIN( CASE WHEN sale_price > 0 THEN sale_price ELSE ( price ) END ) AS min_price ,
                                    MAX( CASE WHEN sale_price > 0 THEN sale_price ELSE ( price ) END ) AS max_price ')->where("status", "publish")->first();
        if (empty($model->min_price) and empty($model->max_price)) {
            return [
                0,
                100
            ];
        }
        return [
            $model->min_price,
            $model->max_price
        ];
    }

    public function getReviewEnable()
    {
        return setting_item("product_enable_review", 1);
    }

    public function getReviewApproved()
    {
        return setting_item("product_review_approved", 1);
    }

    public function check_enable_review_after_booking()
    {
        $option = setting_item("product_review_verification_required", 0);
        if ($option) {
            $number_review = $this->reviewClass::countReviewByServiceID($this->id, Auth::id()) ?? 0;
            $number_booking = $this->bookingClass::countBookingByServiceID($this->id, Auth::id()) ?? 0;
            if ($number_review >= $number_booking) {
                return false;
            }
        }
        return true;
    }

    public static function getReviewStats()
    {
        $reviewStats = [];
        if (!empty($list = setting_item("product_review_stats", []))) {
            $list = json_decode($list, true);
            foreach ($list as $item) {
                $reviewStats[] = $item['title'];
            }
        }
        return $reviewStats;
    }

    public function getReviewDataAttribute()
    {
        $list_score = [
            'score_total'  => 0,
            'score_text'   => __("Not Rate"),
            'total_review' => 0,
            'rate_score'   => [],
        ];
        $dataTotalReview = $this->reviewClass::selectRaw(" AVG(rate_number) as score_total , COUNT(id) as total_review ")->where('object_id', $this->id)->where('object_model', $this->type)->where("status", "approved")->first();
        if (!empty($dataTotalReview->score_total)) {
            $list_score['score_total'] = number_format($dataTotalReview->score_total, 1);
            $list_score['score_text'] = Review::getDisplayTextScoreByLever(round($list_score['score_total']));
        }
        if (!empty($dataTotalReview->total_review)) {
            $list_score['total_review'] = $dataTotalReview->total_review;
        }
        for ($rate = 5; $rate >= 1; $rate--) {
            $number = $this->reviewClass::where('rate_number', $rate)->where('object_id', $this->id)->where('object_model', $this->type)->where("status", "approved")->count();
            if (!empty($list_score['total_review'])) {
                $percent = ($number / $list_score['total_review']) * 100;
            } else {
                $percent = 0;
            }
            $list_score['rate_score'][$rate] = [
                'title'   => $this->reviewClass::getDisplayTextScoreByLever($rate),
                'total'   => $number,
                'percent' => round($percent),
            ];
        }
        return $list_score;
    }

    /**
     * Get Score Review
     *
     * Using for loop space
     */
    public function getScoreReview()
    {
        $product_id = $this->id;
        $list_score = Cache::rememberForever('review_'.$this->type.'_' . $product_id, function () use ($product_id) {
            $dataReview = $this->reviewClass::selectRaw(" AVG(rate_number) as score_total , COUNT(id) as total_review ")->where('object_id', $product_id)->where('object_model', $this->type)->where("status", "approved")->first();
            $score_total = !empty($dataReview->score_total) ? number_format($dataReview->score_total, 1) : 0;
            return [
                'score_total'  => $score_total,
                'total_review' => !empty($dataReview->total_review) ? $dataReview->total_review : 0,
                'review_text'   => $score_total ? Review::getDisplayTextScoreByLever( round( $score_total )) : __("Not rate"),
            ];
        });

        return $list_score;
    }

    public function getNumberReviewsInService($status = false)
    {
        return $this->reviewClass::countReviewByServiceID($this->id, false, $status,$this->type) ?? 0;
    }

    public function getNumberServiceInLocation($location)
    {
        $number = 0;
        if(!empty($location)) {
            $number = parent::join('core_locations', function ($join) use ($location) {
                $join->on('core_locations.id', '=', $this->table.'.location_id')->where('core_locations._lft', '>=', $location->_lft)->where('core_locations._rgt', '<=', $location->_rgt);
            })->where($this->table.".status", "publish")->count($this->table.".id");
        }
        if ($number > 1) {
            return __(":number Spaces", ['number' => $number]);
        }
        return __(":number Space", ['number' => $number]);
    }

    /**
     * @param $from
     * @param $to
     * @return \Illuminate\Database\Eloquent\Builder[]|\Illuminate\Database\Eloquent\Collection
     */
    public function getBookingsInRange($from,$to){

        $query = $this->bookingClass::query();
        $query->whereNotIn('status',['draft']);
        $query->where('start_date','<=',$to)->where('end_date','>=',$from)->take(50);

        $query->where('object_id',$this->id);
        $query->where('object_model',$this->type);

        return $query->orderBy('id','asc')->get();

    }

    public function getStockStatus(){
        $stock = ''; $in_stock = true;
        if ($this->is_manage_stock > 0){
            if ($this->stock_status == 'in'){
                $stock = __(':count in stock',['count'=>$this->quantity - $this->sold]);
            }
        } else {
            $stock = ($this->stock_status == 'in') ? __('In Stock') : '';
        }
        if ($this->stock_status == 'out'){
            $stock = __('Out Of Stock');
            $in_stock = false;
        }
        return [
            'stock'     =>  $stock,
            'in_stock'  =>  $in_stock
        ];
    }

    public function getStockStatusCodeAttribute(){
        if(!$this->is_manage_stock){
            return 'in_stock';
        }
        switch ($this->stock_status){
            case 'in':
                return 'in_stock';
                break;
            case 'out':
                return 'out_stock';
                break;

        }
    }
    public function getStockStatusTextAttribute(){
        if(!$this->manage_stock){
            return __('In Stock');
        }
        switch ($this->stock_status){
            case 1:
                return __('In Stock');
                break;
            case 0:
                return __("Out Stock");
                break;

        }
    }

    /**
     * Single Tabs
     */
    public function getTabsAttribute(){
        $getTabs = [
            [
                'id' => 'content',
                'name' => __('Description'),
                'position' => 10
            ],
            [
                'id' => 'specification',
                'name' => __('Specification'),
                'position' => 20
            ],
            [
                'id' => 'vendor',
                'name' => __('Vendor'),
                'position' => 30
            ],
            [
                'id' => 'review',
                'name' => __('Review'),
                'position' => 40
            ],
            [
                'id' => 'policies',
                'name' => __('Policies'),
                'position' => 50
            ]
        ];
        if (empty(setting_item('product_enable_review'))){
            unset($getTabs[3]);
        }
        $tabs = $getTabs;

        return array_values(\Illuminate\Support\Arr::sort($tabs, function ($value) {
            return $value['position'] ?? 10;
        }));
    }

    public function categorySeeder(){
        return $this->belongsToMany(ProductCategory::class,ProductCategoryRelation::getTableName(),'target_id','cat_id');
    }
    public function termSeeder(){
        return $this->belongsToMany(Terms::class,ProductTerm::getTableName(),'target_id','term_id');
    }
    public function tagsSeeder(){
        return $this->belongsToMany(Tag::class,ProductTag::getTableName(),'target_id','tag_id');
    }
    public function review(){
        return $this->hasMany(Review::class,'object_id','id')->where('object_model',$this->type);
    }
    public function categories(){
        return $this->hasManyThrough(ProductCategory::class, ProductCategoryRelation::class,'target_id','id','id','cat_id');
    }
    public function tags(){
        return $this->hasManyThrough(Tag::class, ProductTag::class,'target_id', 'id','id','tag_id');
    }
    public function brand(){
    	return $this->belongsTo(ProductBrand::class,'brand_id')->withDefault();
    }
    public function variations(){
    	return $this->hasMany(ProductVariation::class);
    }
	public function getMinMaxPriceProductVariations(){
    	if($this->product_type=='variable'){
		    $array = $this->variations()->pluck('price')->toArray();
		    $array= array_values(Arr::sort($array));
		    return ['min'=>head($array),'max'=>last($array)];
	    }
	}
	public function getSameBrandAttribute(){
		return Product::where('id','!=',$this->id)->where("status", "publish")->where("brand_id", $this->brand_id)->take(3)->inRandomOrder()->get();
	}

	public function getProductJsAdminDataAttribute(){
        return [
            'attributes'=>Attributes::query()->ofType($this->type)->get(),
            'attributes_for_variation'=>$this->attributes_for_variation
        ];
    }

    public function getTermsOfAttr($attr_id)
    {
         return Terms::query()->select('core_terms.*')->where('attr_id',$attr_id)->join('product_term as pt','pt.term_id','=','core_terms.id')->where('target_id',$this->id)->get();
    }

    public function getAttributesForVariationDataAttribute(){
	    $res = [];
	    if(!empty($this->attributes_for_variation) and is_array($this->attributes_for_variation))
        {
            foreach ($this->attributes_for_variation as $attr_id) {
                $attr = Attributes::find($attr_id);
                if(empty($attr)) continue;

                $res[$attr_id] = [
                    'attr'=>$attr,
                    'terms'=>$this->getTermsOfAttr($attr_id)
                ];
            }
        }
	    return $res;
    }
    protected function get_stock($st, $pr){
        $sold = (!empty($pr->sold)) ? $pr->sold : 0;
        if ($pr->stock_status == 'in' && $pr->is_manage_stock == 1){
            $st = $pr->quantity - $sold;
        }
        return $st;
    }

    public function addToCartValidate($qty=1, $variant_id=null)
    {
        if($this->price == null && $this->sale_price == null){
            throw  new \Exception('This content must set price. Please contact with author.');
        }
//        gop chung bang product va variant product
        switch ($this->product_type){
            case 'variable':
                    $variant = $this->variations()->where('id',$variant_id)->first();
                    if(!empty($variant)){
                        if(!empty($this->is_manage_stock)){
//                            Nếu SP cha bật quản lý stock	remain_stock = stock - on_hold của sản phẩm cha
                            $onHold = $this->on_hold;
                            if(!empty($this->quantity)){
                                $remainStock = $this->quantity - $onHold;
                                if($qty>$remainStock){
                                    throw new \Exception(__('You cannot add that amount of :product_name to the cart because there is not enough stock (:remain remaining).',['product_name'=>$this->title,'remain'=>$remainStock]));
                                }
                            }else{
                                throw new \Exception(__('You cannot add to cart. Please contact author.'));
                            }
                        }else{
//                            Nếu SP cha không bật	remain_stock = stock - on_hodl riêng của từng variant
                            $variant->stockValidation($qty);
                        }
                    }else{
                        $this->stockValidation($qty);
                    }
                break;
            case 'external':
                throw  new \Exception('Product type external. You cannot add to cart!');
                break;
            default:
                $this->stockValidation($qty);
                break;
        }

    }
    public function list_attrs(){
        return Attributes::select('id','name','slug')->get();
    }

    public function get_variable($id){
        return ProductVariationTerm::select('product_variation_term.*','core_terms.id as id_term','core_attrs.id as id_attrs')
                    ->join('core_terms','product_variation_term.term_id','=','core_terms.id')
                    ->join('core_attrs','core_terms.attr_id','=','core_attrs.id')
                    ->where('product_variation_term.product_id',$id)->get();
    }

    public function update_service_rate(){
        $rateData = $this->reviewClass::selectRaw("AVG(rate_number) as rate_total")->where('object_id', $this->id)->where('object_model',$this->type)->where("status", "approved")->first();
        $rate_number = number_format( $rateData->rate_total ?? 0 , 1);
        $this->review_score = $rate_number;
        $this->save();
    }
    public function scopeOfVendor($query,User $user){
        return $query->where('author_id',$user->id);
    }
    public function hasWishList(){
        return $this->hasOne(UserWishList::class, 'object_id','id')->where('object_model' , $this->type)->where('user_id' , Auth::id() ?? 0);
    }


    public static function search($fill)
    {

        $query = parent::query()->select("products.*");

        $query->where("products.status", "publish");

        if (!empty($fill['min_price']) and !empty($fill['max_price'])) {
            $raw_sql_min_max = "( products.price >= ? and products.price <= ? )";
            $query->whereRaw($raw_sql_min_max,[$fill['min_price'],$fill['max_price']]);
        }

        if (!empty($fill['terms']) and is_array($fill['terms'])) {
            $query->join('product_term as tt', 'tt.target_id', "products.id")->whereIn('tt.term_id', $fill['terms']);
        }

        if (!empty($fill['review_score']) && is_array($fill['review_score'])) {
            $where_review_score = [];
            foreach ($fill['review_score'] as $number){
                $decrease_number = $number - 1;
                $where_review_score[] = " ( products.review_score >= {$decrease_number}.5 AND products.review_score <= {$number}.9 ) ";
            }
            $sql_where_review_score = " ( " . implode("OR", $where_review_score) . " )  ";
            $query->WhereRaw($sql_where_review_score);
        }

        if (!empty($fill['brand']) && is_array($fill['brand'])){
            $query->whereIn('products.brand_id', $fill['brand']);
        }

        if (!empty($fill['tag'])){
            $tag_id = Tag::select('id')->where('slug',$fill['tag'])->first()->getAttribute('id');
            $query->join('product_tag','products.id','=','product_tag.target_id')->where('tag_id',$tag_id);
        }

        if (!empty($fill['cat_ids'])) {
            $category_ids = $fill['cat_ids'];
            $query->join('product_category_relations', function ($join) use ($category_ids) {
                $join->on('products.id', '=', 'product_category_relations.target_id')
                    ->whereIn('product_category_relations.cat_id', $category_ids);
            });
        }

        if (!empty($fill['category_id'])){
            $query->join('product_category_relations as ctr', 'products.id','=','ctr.target_id')->where('ctr.cat_id', $fill['category_id']);
        }

        if (!empty($fill['s'])){
            $search = $fill['s'];
            $query->where('products.title','LIKE',"%$search%");
        }

        if(!empty($fill['is_featured']))
        {
            $query->where('products.is_featured',1);
        }

        $orderby = $fill['order_by'] ?? "desc";
        $order = $fill['order'] ?? $fill['sort'] ?? "id";

        switch ($order){
            case "price_asc":
                $query->orderBy("products.price", "asc");
                break;
            case "price_desc":
                $query->orderBy("products.price", "desc");
                break;
            case "rate":
                $query->orderBy("review_score", $orderby);
                break;
            case"id":
            case"title":
                $query->orderBy("products.".$order, $orderby);
            break;
            default:
                $query->orderBy("is_featured", "desc");
                $query->orderBy("id", "desc");
        }
        $query->groupBy("products.id");
        $limit = $fill['limit'] ?? 12;
        return $query->with(['hasWishList','brand'])->paginate($limit);
    }


    public function productOnHold(){
        return $this->hasMany(ProductOnHold::class,'product_id','id')->where('expired_at','>',now());
    }

    public function getOnHoldAttribute()
    {
        return $this->productOnHold()->sum('qty');
    }

    //    Hatt






}
