<?php


namespace Modules\Order\Models;


use App\BaseModel;
use App\Traits\HasMeta;
use App\User;
use Carbon\Carbon;
use Illuminate\Database\Eloquent\Casts\Attribute;
use Illuminate\Database\Eloquent\SoftDeletes;
use Modules\Order\Events\OrderItemStatusUpdated;
use Modules\Product\Models\Product;
use Modules\Product\Models\ProductVariation;
use Themes\Educrat\Modules\Course\Models\Course;

class OrderItem extends BaseModel
{

    use SoftDeletes;
    use HasMeta;
    protected $table = 'core_order_items';

    protected $meta_parent_key = 'order_item_id';
    protected $metaClass = OrderItemMeta::class;

    protected $casts = [
        'meta'=>'array'
    ];

    public function order(){
        return $this->belongsTo(Order::class,'order_id');
    }
    public function vendor(){
        return $this->belongsTo(User::class,'vendor_id');
    }

    public function subtotal(): Attribute
    {
        return Attribute::make(
            get:function($value){
                return $this->price * $this->qty + $this->extra_price_total;

            }
        );
    }

    public function extraPriceTotal(): Attribute
    {
        return Attribute::make(
            get:function($value){
                $t = 0;
                if(!empty($this->meta['extra_prices']))
                {
                    foreach ($this->meta['extra_prices'] as $extra_price){
                        $t += (float)($extra_price['price']);
                    }
                }
                return $t;
            }
        );
    }

    public static function search($filters = [])
    {
        $query = parent::query()->select(['core_order_items.*','core_orders.customer_id']);
        $query->join('core_orders','core_orders.id','=','core_order_items.order_id');

        if(!empty($filters['vendor_id']))
        {
            $query->where('vendor_id',$filters['vendor_id']);
        }
        if(!empty($filters['status']))
        {
            $query->where('core_order_items.status',$filters['status']);
        }
        if(!empty($filters['s']))
        {
            $query->where(function($query) use ($filters){
                return $query->where('object_id',$filters['s'])->orWhere('core_order_items.id',$filters['s']);
            });
        }
        return $query;
    }

    public function product(){
        return $this->belongsTo(Product::class,'object_id');
    }

    public function model() : Attribute{
        return Attribute::make(
            get:function($value){
                $keys = get_services();
                if(!empty($keys[$this->object_model])){
                    $model = app()->make($keys[$this->object_model]);
                    if(!empty($this->product)){
                        $model->setRawAttributes($this->product->getAttributes());
                        $model->exists = 1;
                    }
                    return $model;
                }else{
                    return $this->product;
                }
            }
        );
    }

    public function save(array $options = [])
    {

        if(!$this->locale){
            $this->locale = app()->getLocale();
        }
        if(!$this->order_date){
            $this->order_date = Carbon::now();
        }
        return parent::save($options); // TODO: Change the autogenerated stub
    }

    public function calculateCommission($saveMeta = true){
        if(is_vendor_enable()){
            $commission = [];
            $commission['amount'] = setting_item('vendor_commission_amount', 0);
            $commission['type'] = setting_item('vendor_commission_type', 'percent');
            $vendor = $this->vendor;
            if($vendor){
                if($vendor->vendor_commission_type){
                    $commission['type'] = $vendor->vendor_commission_type;
                }
                if($vendor->vendor_commission_amount){
                    $commission['amount'] = $vendor->vendor_commission_amount;
                }
                if($commission['type'] == 'disable'){
                    // No Commission for Admin
                    return;
                }
            }
            if ($commission['type'] == 'percent') {
                $this->commission_amount = (float)($this->subtotal / 100) * $commission['amount'];
            } else {
                $this->commission_amount = (float)min($this->subtotal,$commission['amount']);
            }
            if($saveMeta){
                $this->addMeta('commission',$commission);
            }
        }
    }

    public function calculateTotal(){
        $this->setAttribute('subtotal',$this->subtotal);
    }


    public function updatePrice(){
        if($this->model){
            if($this->variation_id){
                $this->price = ProductVariation::find($this->variation_id)->sale_price ?? 0;
            }else{
                $this->price = min($this->model->price,$this->model->sale_price);
            }
        }
        $this->save();
    }



    public function getEditableStatues(){
        switch ($this->status){
            case Order::PROCESSING :
                return [Order::CANCELLED,Order::COMPLETED];
                break;
            case Order::ON_HOLD :
                return [Order::PROCESSING,Order::FAILED];
                break;
            case Order::COMPLETED :
                return [Order::REFUNDED];
                break;
            case Order::FAILED :
                return [Order::CANCELLED];
                break;
        }
    }

    /**
     * Change Order item Status, Add note, Dispatch event
     *
     * @param $status
     */
    public function updateStatus($status){

        if($status === $this->status){
            return;
        }

        $old_status = $this->status;
        $this->status = $status;

        $this->save();


        $this->order->addNote(OrderNote::ITEM_STATUS_CHANGED,__("Order Item :id status changed from :old_status to :new_status",['id'=>$this->id,'old_status'=>$old_status,'new_status'=>$status]),['old_status'=>$old_status,'new_status'=>$status]);

        OrderItemStatusUpdated::dispatch($this,$old_status,$status);
    }
}
