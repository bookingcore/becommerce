<?php


namespace Modules\Order\Models;


use App\BaseModel;
use App\Traits\HasMeta;
use App\User;
use Carbon\Carbon;
use Illuminate\Database\Eloquent\SoftDeletes;
use Modules\Product\Models\Product;

class OrderItem extends BaseModel
{

    use SoftDeletes;
    use HasMeta;
    protected $table = 'core_order_items';

    protected $meta_parent_key = 'order_item_id';
    protected $metaClass = OrderItemMeta::class;

    protected $casts = [
        'meta'=>'array'
    ];

    public function model(){
        $keys = get_services();
        if(!empty($keys[$this->object_model])){
            return $this->belongsTo($keys[$this->object_model],'object_id');
        }else{
            return $this->belongsTo(Product::class,'object_id');
        }
    }

    public function order(){
        return $this->belongsTo(Order::class,'order_id');
    }
    public function vendor(){
        return $this->belongsTo(User::class,'vendor_id');
    }

    public function getSubtotalAttribute(){
        return $this->price * $this->qty + $this->extra_price_total;
    }

    public function getExtraPriceTotalAttribute(){
        $t = 0;
        if(!empty($this->meta['extra_prices']))
        {
            foreach ($this->meta['extra_prices'] as $extra_price){
                $t += (float)($extra_price['price']);
            }
        }
        return $t;
    }

    public function search($filters = [])
    {
        $query = parent::query()->select(['core_order_items.*','core_orders.customer_id']);
        $query->join('core_orders','core_orders.id','=','core_order_items.order_id');

        if(!empty($filters['vendor_id']))
        {
            $query->where('vendor_id',$filters['vendor_id']);
        }
        return $query;
    }

    public function product(){
        return $this->belongsTo(Product::class,'product_id');
    }

    public function save(array $options = [])
    {

        if(!$this->locale){
            $this->locale = app()->getLocale();
        }
        if(!$this->order_date){
            $this->order_date = Carbon::now();
        }
        return parent::save($options); // TODO: Change the autogenerated stub
    }

    public function calculateCommission($saveMeta = true){
        if(is_vendor_enable()){
            $commission = [];
            $commission['amount'] = setting_item('vendor_commission_amount', 0);
            $commission['type'] = setting_item('vendor_commission_type', 'percent');
            $vendor = $this->vendor;
            if($vendor){
                if($vendor->vendor_commission_type){
                    $commission['type'] = $vendor->vendor_commission_type;
                }
                if($vendor->vendor_commission_amount){
                    $commission['amount'] = $vendor->vendor_commission_amount;
                }
                if($commission['type'] == 'disable'){
                    // No Commission for Admin
                    return;
                }
            }
            if ($commission['type'] == 'percent') {
                $this->commission_amount = (float)($this->subtotal / 100) * $commission['amount'];
            } else {
                $this->commission_amount = (float)min($this->subtotal,$commission['amount']);
            }
            if($saveMeta){
                $this->addMeta('commission',$commission);
            }
        }
    }
}
